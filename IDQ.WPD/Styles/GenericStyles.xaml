<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:IDQ"
                    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
                    xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
                    mc:Ignorable="d">
                   <ResourceDictionary.MergedDictionaries>
                        <d:ResourceDictionary Source="SkinColorsDark.xaml" />
                        <d:ResourceDictionary Source="CardColorsDark.xaml"/>
                    </ResourceDictionary.MergedDictionaries>
    
    

    <!--#region Brushes With Skin-->
    <SolidColorBrush x:Key="Brush.Window.Upper.Background.Dark" Color="{StaticResource Color.WindowUpper.Background.Dark}"/>
    <SolidColorBrush x:Key="Brush.Window.Upper.Foreground.Dark" Color="{StaticResource Color.WindowUpper.Foreground.Dark}"/>
    <SolidColorBrush x:Key="Brush.Window.Inner.Background.Soft" Color="{StaticResource Color.WindowInner.Background.Soft}"/>
    <SolidColorBrush x:Key="Brush.Window.Inner.Foreground.Soft" Color="{StaticResource Color.WindowInner.Foreground.Soft}"/>

    <SolidColorBrush x:Key="Brush.Button.Background.Normal" Color="{StaticResource Color.Button.Background.Normal}"/>
    <SolidColorBrush x:Key="Brush.Button.Background.Highlight" Color="{StaticResource Color.Button.Background.Highlight}"/>
    <SolidColorBrush x:Key="Brush.Button.Background.Pressed" Color="{StaticResource Color.Button.Background.Pressed}"/>
    <SolidColorBrush x:Key="Brush.Button.Foreground" Color="{StaticResource Color.Button.Foreground}"/>

    <LinearGradientBrush x:Key="TabItem.MouseOver.Background" EndPoint="0,1" StartPoint="0,0">
        <GradientStop Color="#ECF4FC" Offset="0.0"/>
        <GradientStop Color="#DCECFC" Offset="1.0"/>
    </LinearGradientBrush>
    <SolidColorBrush x:Key="TabItem.MouseOver.Border" Color="#7EB4EA"/>
    <SolidColorBrush x:Key="TabItem.Selected.Background" Color="#FFFFFF"/>
    <SolidColorBrush x:Key="TabItem.Selected.Border" Color="#ACACAC"/>
    <SolidColorBrush x:Key="TabItem.Disabled.Background" Color="#F0F0F0"/>
    <SolidColorBrush x:Key="TabItem.Disabled.Border" Color="#D9D9D9"/>
    <SolidColorBrush x:Key="Brush.Grid.Background.Normal" Color="{StaticResource Color.Grid.Background.Normal}"/>
    <SolidColorBrush x:Key="Brush.Grid.Background.Header" Color="{StaticResource Color.Grid.Background.Header}"/>
    <SolidColorBrush x:Key="Brush.Grid.Foreground" Color="{StaticResource Color.Grid.Foregound}"/>
    <SolidColorBrush x:Key="Brush.Grid.Foreground.Header" Color="{StaticResource Color.Grid.Foregound.Header}"/>

    <SolidColorBrush x:Key="Brush.TextBox.Background.Dark" Color="{StaticResource Color.TextBox.Background.Dark}"/>
    <SolidColorBrush x:Key="Brush.TextBox.Foreground.Dark" Color="{StaticResource Color.TextBox.Foreground.Dark}"/>
    <SolidColorBrush x:Key="Brush.TextBox.Background.Light" Color="{StaticResource Color.TextBox.Background.Light}"/>
    <SolidColorBrush x:Key="Brush.TextBox.Foreground.Light" Color="{StaticResource Color.TextBox.Foreground.Light}"/>

    <SolidColorBrush x:Key="Brush.TabControl.Background.Normal" Color="{StaticResource Color.TabControl.Background.Normal}"/>
    <SolidColorBrush x:Key="Brush.TabControl.Background.MouseOver" Color="{StaticResource Color.TabControl.Background.MouseOver}"/>
    <SolidColorBrush x:Key="Brush.TabControl.Background.IsSelected" Color="{StaticResource Color.TabControl.Background.IsSelected}"/>


    <!--Navigation Brushes-->
    <SolidColorBrush x:Key="Brush.Navigation.Background.Normal" Color="{StaticResource Color.Navigation.Background.Normal}"/>
    <SolidColorBrush x:Key="Brush.Navigation.Background.Selected" Color="{StaticResource Color.Navigation.Background.Selected}"/>
    <SolidColorBrush x:Key="Brush.Navigation.Foreground" Color="{StaticResource Color.Navigation.Foreground}"/>
    

    <!--Card Brushes-->
    <SolidColorBrush x:Key="Brush.Card.Background" Color="{StaticResource Color.Card.Background}"/>
    <SolidColorBrush x:Key="Brush.Card.Title" Color="{StaticResource Color.Card.Title}"/>
    <SolidColorBrush x:Key="Brush.Card.Separator" Color="{StaticResource Color.Card.Separator}"/>
    <SolidColorBrush x:Key="Brush.Card.Value" Color="{StaticResource Color.Card.Value}"/>
    <!--#endregion Brushes With Skin-->
    
    
    

    

    <!--#region Default Button-->
    <Style TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Type Button}}">
        <Setter Property="Background" Value="{StaticResource Brush.Button.Background.Normal}"/>
        <Setter Property="Foreground" Value="{StaticResource Brush.Button.Foreground}"/>
        <Setter Property="FontWeight" Value="Bold"/>
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="Margin" Value="5"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Template" Value="{DynamicResource roundedButton}" />
    </Style>
    <!--Default Button Template-->
    <SolidColorBrush x:Key="Button.MouseOver.Border" Color="#FF3C7FB1"/>
    <SolidColorBrush x:Key="Button.Pressed.Border" Color="#FF2C628B"/>
    <SolidColorBrush x:Key="Button.Disabled.Background" Color="#FFF4F4F4"/>
    <SolidColorBrush x:Key="Button.Disabled.Border" Color="#FFADB2B5"/>
    <SolidColorBrush x:Key="Button.Disabled.Foreground" Color="#FF838383"/>

    <ControlTemplate x:Key="roundedButton" TargetType="{x:Type ButtonBase}">
        <Border x:Name="border" Padding="2,0" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" CornerRadius="3" SnapsToDevicePixels="true">
            <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="Button.IsDefaulted" Value="true">
                <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="Background" TargetName="border" Value="{StaticResource Brush.Button.Background.Highlight}"/>
                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.MouseOver.Border}"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="true">
                <Setter Property="Background" TargetName="border" Value="{StaticResource Brush.Button.Background.Pressed}"/>
                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Pressed.Border}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Background" TargetName="border" Value="{StaticResource Button.Disabled.Background}"/>
                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Disabled.Border}"/>
                <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{StaticResource Button.Disabled.Foreground}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <!--#endregion Default Button-->


    <!--#region Default CheckBox-->
    <Style TargetType="{x:Type CheckBox}" BasedOn="{StaticResource {x:Type CheckBox}}">
        <Setter Property="Margin" Value="5" />
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Foreground" Value="{StaticResource Brush.Window.Inner.Foreground.Soft}"/>
    </Style>
    <!--#endregion Default CheckBox-->
    
    
    <!--#region Default DataGrid-->
    <Style TargetType="{x:Type DataGrid}" BasedOn="{StaticResource {x:Type DataGrid}}">
        <Setter Property="AutoGenerateColumns" Value="False" />
        <Setter Property="Background" Value="{StaticResource Brush.Grid.Background.Normal}" />
        <Setter Property="CanUserAddRows" Value="False" />
        <Setter Property="CanUserDeleteRows" Value="False" />
        <Setter Property="CanUserReorderColumns" Value="False" />
        <Setter Property="CanUserResizeRows" Value="False" />
        <Setter Property="CanUserSortColumns" Value="True" />
        <Setter Property="ColumnHeaderStyle" Value="{DynamicResource HeaderCenter}" />
        <Setter Property="GridLinesVisibility" Value="None" />
        <Setter Property="IsReadOnly" Value="True" />
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="KeyboardNavigation.TabNavigation" Value="None" />
        <Setter Property="Margin" Value="5" />
        <Setter Property="RowHeaderWidth" Value="0" />
        <Setter Property="SelectionMode" Value="Single" />
        <Setter Property="SelectionUnit" Value="FullRow" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
    </Style>
    <!--Defualt DataGridRow-->
    <Style TargetType="{x:Type DataGridRow}" BasedOn="{StaticResource {x:Type DataGridRow}}">
        <Style.Triggers>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="BorderBrush" Value="Black" />
                <Setter Property="BorderThickness" Value="1" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--Defualt DataGridCell-->
    <Style TargetType="{x:Type DataGridCell}" BasedOn="{StaticResource {x:Type DataGridCell}}">
        <Style.Triggers>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="BorderThickness" Value="0" />
                <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Self}, Path=Foreground}"/>
                <Setter Property="Background" Value="{x:Null}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--DataGrid Header Options-->
    <Style x:Key="HeaderCenter" TargetType="{x:Type DataGridColumnHeader}">
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="Background" Value="{DynamicResource Brush.Grid.Background.Header}"/>
        <Setter Property="Foreground" Value="{DynamicResource Brush.Grid.Foreground.Header}"/>
    </Style>
    <Style x:Key="HeaderLeft" TargetType="{x:Type DataGridColumnHeader}">
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
    </Style>
    <!--#endregion Default DataGrid-->

    
    <!--#region Default GroupBox-->
    <Style TargetType="{x:Type GroupBox}" BasedOn="{StaticResource {x:Type GroupBox}}">
        <Setter Property="Foreground" Value="{StaticResource Brush.Window.Upper.Foreground.Dark}"/>
        <Setter Property="BorderBrush" Value="Gray"/>
        <Setter Property="Margin" Value="2"/>
    </Style>
    <!--#endregion Default GroupBox-->

    
    <!--#region Default TextBox-->
    <Style TargetType="TextBox" BasedOn="{StaticResource {x:Type TextBox}}">
        <Setter Property="Background" Value="{StaticResource Brush.TextBox.Background.Light}"/>
        <Setter Property="Foreground" Value="{StaticResource Brush.TextBox.Foreground.Light}"/>
        <Setter Property="Template" Value="{StaticResource roundedTextBox}"/>
    </Style>
    <!-- Default TextBox Template-->
    <SolidColorBrush x:Key="TextBox.MouseOver.Border" Color="#FF7EB4EA"/>
    <SolidColorBrush x:Key="TextBox.Focus.Border" Color="#FF569DE5"/>
    
    <ControlTemplate x:Key="roundedTextBox" TargetType="{x:Type TextBoxBase}">
        <Border x:Name="border" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" CornerRadius="3" SnapsToDevicePixels="True">
            <ScrollViewer x:Name="PART_ContentHost" Focusable="false" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden"/>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Opacity" TargetName="border" Value="0.56"/>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource TextBox.MouseOver.Border}"/>
            </Trigger>
            <Trigger Property="IsKeyboardFocused" Value="true">
                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource TextBox.Focus.Border}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <!--#endregion Default TextBox-->


    <!--#region Default Label-->
    <Style TargetType="Label" BasedOn="{StaticResource {x:Type Label}}">
        <Setter Property="Foreground" Value="{StaticResource Brush.Window.Inner.Foreground.Soft}"/>
    </Style>
    <!--#endregion Default Label-->

    
    
    
    <!--#region Custom TabControl-->
    <ControlTemplate x:Key="verticalTabControlTemplate" TargetType="{x:Type TabControl}">
        <Grid x:Name="templateRoot" Margin="0" ClipToBounds="true" SnapsToDevicePixels="true" KeyboardNavigation.TabNavigation="Local">
            <Grid.ColumnDefinitions>
                <ColumnDefinition x:Name="ColumnDefinition0"/>
                <ColumnDefinition x:Name="ColumnDefinition1" Width="0"/>
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
                <RowDefinition x:Name="RowDefinition0" Height="Auto"/>
                <RowDefinition x:Name="RowDefinition1" Height="*"/>
            </Grid.RowDefinitions>
            <TabPanel x:Name="headerPanel" Background="Transparent" Grid.Column="0" IsItemsHost="true" Margin="0" Grid.Row="0" KeyboardNavigation.TabIndex="1" Panel.ZIndex="1"/>
            <Border x:Name="contentPanel" Margin="0" Padding="0" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" Grid.Column="0" KeyboardNavigation.DirectionalNavigation="Contained" Grid.Row="1" KeyboardNavigation.TabNavigation="Local" KeyboardNavigation.TabIndex="2">
                <ContentPresenter x:Name="PART_SelectedContentHost" ContentSource="SelectedContent" Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
            </Border>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="TabStripPlacement" Value="Bottom">
                <Setter Property="Grid.Row" TargetName="headerPanel" Value="1"/>
                <Setter Property="Grid.Row" TargetName="contentPanel" Value="0"/>
                <Setter Property="Height" TargetName="RowDefinition0" Value="*"/>
                <Setter Property="Height" TargetName="RowDefinition1" Value="Auto"/>
                <Setter Property="Margin" TargetName="headerPanel" Value="0"/>
            </Trigger>
            <Trigger Property="TabStripPlacement" Value="Left">
                <Setter Property="Grid.Row" TargetName="headerPanel" Value="0"/>
                <Setter Property="Grid.Row" TargetName="contentPanel" Value="0"/>
                <Setter Property="Grid.Column" TargetName="headerPanel" Value="0"/>
                <Setter Property="Grid.Column" TargetName="contentPanel" Value="1"/>
                <Setter Property="Width" TargetName="ColumnDefinition0" Value="Auto"/>
                <Setter Property="Width" TargetName="ColumnDefinition1" Value="*"/>
                <Setter Property="Height" TargetName="RowDefinition0" Value="*"/>
                <Setter Property="Height" TargetName="RowDefinition1" Value="0"/>
                <Setter Property="Margin" TargetName="headerPanel" Value="0"/>
            </Trigger>
            <Trigger Property="TabStripPlacement" Value="Right">
                <Setter Property="Grid.Row" TargetName="headerPanel" Value="0"/>
                <Setter Property="Grid.Row" TargetName="contentPanel" Value="0"/>
                <Setter Property="Grid.Column" TargetName="headerPanel" Value="1"/>
                <Setter Property="Grid.Column" TargetName="contentPanel" Value="0"/>
                <Setter Property="Width" TargetName="ColumnDefinition0" Value="*"/>
                <Setter Property="Width" TargetName="ColumnDefinition1" Value="Auto"/>
                <Setter Property="Height" TargetName="RowDefinition0" Value="*"/>
                <Setter Property="Height" TargetName="RowDefinition1" Value="0"/>
                <Setter Property="Margin" TargetName="headerPanel" Value="0"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="TextElement.Foreground" TargetName="templateRoot" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="verticalTabControlTabItemTemplate" TargetType="{x:Type TabItem}">
        <Grid x:Name="templateRoot" SnapsToDevicePixels="true">
            <ContentPresenter x:Name="contentPresenter" ContentSource="Header" Focusable="False" HorizontalAlignment="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        </Grid>
        <ControlTemplate.Triggers>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true"/>
                    <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Left"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource Brush.TabControl.Background.MouseOver}"/>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true"/>
                    <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Bottom"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource Brush.TabControl.Background.MouseOver}"/>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true"/>
                    <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Right"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource Brush.TabControl.Background.MouseOver}"/>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true"/>
                    <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Top"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource Brush.TabControl.Background.MouseOver}"/>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="false"/>
                    <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Left"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="Opacity" TargetName="contentPresenter" Value="0.56"/>
                <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource Brush.TabControl.Background.MouseOver}"/>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="false"/>
                    <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Bottom"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="Opacity" TargetName="contentPresenter" Value="0.56"/>
                <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource Brush.TabControl.Background.MouseOver}"/>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="false"/>
                    <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Right"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="Opacity" TargetName="contentPresenter" Value="0.56"/>
                <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource Brush.TabControl.Background.MouseOver}"/>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="false"/>
                    <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Top"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="Opacity" TargetName="contentPresenter" Value="0.56"/>
                <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource Brush.TabControl.Background.MouseOver}"/>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="false"/>
                    <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Left"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource Brush.TabControl.Background.Normal}"/>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="true"/>
                    <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Left"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="Panel.ZIndex" Value="1"/>
                <Setter Property="Margin" Value="-2,-2,0,-2"/>
                <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource Brush.TabControl.Background.IsSelected}"/>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="false"/>
                    <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Bottom"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource Brush.TabControl.Background.Normal}"/>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="true"/>
                    <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Bottom"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="Panel.ZIndex" Value="1"/>
                <Setter Property="Margin" Value="-2,0,-2,-2"/>
                <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource Brush.TabControl.Background.IsSelected}"/>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="false"/>
                    <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Right"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource Brush.TabControl.Background.Normal}"/>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="true"/>
                    <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Right"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="Panel.ZIndex" Value="1"/>
                <Setter Property="Margin" Value="0,-2,-2,-2"/>
                <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource Brush.TabControl.Background.IsSelected}"/>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="false"/>
                    <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Top"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource Brush.TabControl.Background.Normal}"/>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="true"/>
                    <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Top"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="Panel.ZIndex" Value="1"/>
                <Setter Property="Margin" Value="-2,-2,-2,0"/>
                <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource Brush.TabControl.Background.IsSelected}"/>
            </MultiDataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <!--#endregion Custom TabControl-->


    <Style x:Key="TextRight" TargetType="{x:Type TextBlock}">
        <Setter Property="HorizontalAlignment" Value="Right" />
    </Style>
    <Style x:Key="TextCenter" TargetType="{x:Type TextBlock}">
        <Setter Property="HorizontalAlignment" Value="Center" />
    </Style>










    <!--               -   Converters  -                        -->
    <SolidColorBrush x:Key="NoStockBackground" Color="LightPink" />
    <SolidColorBrush x:Key="LowStockBackground" Color="Orange" />
    <SolidColorBrush x:Key="MinStockBackground" Color="LightBlue" />
    <SolidColorBrush x:Key="OverStockBackground" Color="DarkSeaGreen" />

    <SolidColorBrush x:Key="AgregadoForeground" Color="Red" />
    

    
    
    
    

    
    
    
    
    
    
    
    

    
    


    <!--           Default ComboBox             -->
    <Style TargetType="{x:Type ComboBox}" BasedOn="{StaticResource {x:Type ComboBox}}">
        <Setter Property="Margin" Value="5" />
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="IsEditable" Value="False" />
    </Style>
    

    
    
    
    
    <!--            Default MenuItem            -->
    <Style TargetType="{x:Type MenuItem}" BasedOn="{StaticResource {x:Type MenuItem}}">
        <Setter Property="IsTabStop" Value="False" />
    </Style>

    <!--            Defualt TabControl          -->
    <Style TargetType="{x:Type TabControl}" BasedOn="{StaticResource {x:Type TabControl}}">
        <Setter Property="Margin" Value="5" />
    </Style>

    <!--            Defautl TabItem             -->
    <Style TargetType="{x:Type TabItem}" BasedOn="{StaticResource {x:Type TabItem}}">
        <Setter Property="IsTabStop" Value="False" />
    </Style>

    <!--            Default Image               >
    <Style TargetType="{x:Type Image}">
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="VerticalAlignment" Value="Top"/>
    </Style>

    <!            Default Label               >
    <Style TargetType="{x:Type Label}" BasedOn="{StaticResource {x:Type Label}}">
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
        <Setter Property="VerticalAlignment" Value="Top"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="Focusable" Value="False" />
    </Style>

    <!           Default RadioButton          >
    <Style TargetType="{x:Type RadioButton}" BasedOn="{StaticResource {x:Type RadioButton}}">
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="VerticalAlignment" Value="Top"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
    </Style>

    <!            Default TextBox             >
    <Style TargetType="{x:Type TextBox}" BasedOn="{StaticResource {x:Type TextBox}}">
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
        <Setter Property="Margin" Value="5"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Template" Value="{DynamicResource roundedTextBox}" />
    </Style>
    -->


    <!--                - Custom DataGridRow(fullStockGridRow)        -->
    <Style x:Key="fullStockGridRow" TargetType="DataGridRow" BasedOn="{StaticResource {x:Type DataGridRow}}">
        <Setter Property="Background" Value="{StaticResource OverStockBackground}" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding Path=stockVsMinimo, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}" Value="1">
                <Setter Property="Background" Value="{StaticResource NoStockBackground}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=stockVsMinimo, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}" Value="2">
                <Setter Property="Background" Value="{StaticResource LowStockBackground}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=stockVsMinimo, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}" Value="3">
                <Setter Property="Background" Value="{StaticResource MinStockBackground}" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <!--                - Custom DataGridRow(stockGridRow)        -->
    <Style x:Key="stockGridRow" TargetType="DataGridRow" BasedOn="{StaticResource {x:Type DataGridRow}}">
        <Setter Property="Background" Value="{StaticResource OverStockBackground}" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding Path=stockVsMinimo, UpdateSourceTrigger=PropertyChanged}" Value="1">
                <Setter Property="Background" Value="{StaticResource NoStockBackground}" />
            </DataTrigger>
        </Style.Triggers>
    </Style>
    
    
    
    <!--           - Custom Rectangle -             -->
    <Style x:Key="ColourRectangle" TargetType="{x:Type Rectangle}">
        <Setter Property="Focusable" Value="False" />
        <Setter Property="IsHitTestVisible" Value="False" />
        <Setter Property="Width" Value="10" />
        <Setter Property="Height" Value="10" />
        <Setter Property="Margin" Value="5" />
    </Style>

    <!--              - Custom TextBox -            -->
    <Style x:Key="MainTextBox" TargetType="{x:Type TextBox}">
        <Setter Property="Template" Value="{DynamicResource roundedTextBox}" />
        <Setter Property="IsTabStop" Value="True" />
        <Setter Property="Focusable" Value="True" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="Margin" Value="5" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding resetFocus, UpdateSourceTrigger=PropertyChanged}" Value="True">
                <Setter Property="FocusManager.FocusedElement" Value="{Binding RelativeSource={RelativeSource Self}}" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <!--                - Custom DataGridCell           -->
    <Style x:Key="dataGridColumnActivo" TargetType="{x:Type DataGridCell}" BasedOn="{StaticResource {x:Type DataGridCell}}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle>
                        <Rectangle.Style>
                            <Style TargetType="{x:Type Rectangle}" BasedOn="{StaticResource ColourRectangle}">
                                <Setter Property="Fill" Value="Transparent" />
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding Activo}" Value="False">
                                        <Setter Property="Fill" Value="{StaticResource AgregadoForeground}" />
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Rectangle.Style>
                    </Rectangle>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>




    <!--              - Custom Label -            -->
    <Style x:Key="LabelSobreTextBox" TargetType="{x:Type Label}" BasedOn="{StaticResource {x:Type Label}}">
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="Margin" Value="0,0,0,0" />
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="Focusable" Value="False" />
    </Style>

    <Style x:Key="SignoPesos" TargetType="{x:Type Label}" BasedOn="{StaticResource {x:Type Label}}">
        <Setter Property="Content" Value="$" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="Margin" Value="1,0,0,0" />
        <Setter Property="Foreground" Value="Gray" />
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="Focusable" Value="False" />
    </Style>






    <!--Card Control Styles-->
    <Style x:Key="CardLabel" TargetType="{x:Type Label}" BasedOn="{StaticResource {x:Type Label}}">
        <Setter Property="Foreground" Value="{StaticResource Brush.Card.Value}"/>
        <Setter Property="Margin" Value="0"/>
        <Setter Property="Padding" Value="2"/>
    </Style>
    <Style x:Key="CardPesosLabel" TargetType="{x:Type Label}" BasedOn="{StaticResource SignoPesos}">
        <Setter Property="Foreground" Value="{StaticResource Brush.Card.Value}"/>
        <Setter Property="Margin" Value="0"/>
        <Setter Property="Padding" Value="2"/>
        <Setter Property="FontSize" Value="11"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
    </Style>
    <Style x:Key="CardRectangleSeparator" TargetType="{x:Type Rectangle}">
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="Margin" Value="2,0"/>
        <Setter Property="RadiusX" Value="80"/>
        <Setter Property="RadiusY" Value="50"/>
        <Setter Property="StrokeThickness" Value="0.5"/>
        <Setter Property="Stroke" Value="{StaticResource Brush.Card.Separator}"/>
    </Style>
    <Style x:Key="CardBorderSeparator" TargetType="{x:Type Border}">
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="Margin" Value="5"/>
        <Setter Property="BorderBrush" Value="Gray"/>
        <Setter Property="BorderThickness" Value="1"/>
    </Style>
    <Style x:Key="CardBorderBackground" TargetType="{x:Type Border}">
        <Setter Property="Background" Value="{StaticResource Brush.Card.Background}"/>
    </Style>
    <Style x:Key="CardTitleTextBox" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource {x:Type TextBlock}}">
        <Setter Property="Foreground" Value="{StaticResource Brush.Card.Title}"/>
        <Setter Property="FontWeight" Value="Bold"/>
        <Setter Property="FontSize" Value="14"/>
    </Style>
    <!--Card Control Styles-->





</ResourceDictionary>